# align to reference and perform quality control on alignments w samtools

# we have given you the rules you will need to fill out remember when structuring your dependencies, 
# we are only downloading the GTF and genome.fa, we will not be doing anything further with them this week
NAMES = ['P0rep1', 'P0rep2', 'P4rep1', 'P4rep2', 'P7rep1', 'P7rep2', 'ADrep1','ADrep2']

rule all:
	input:
		#'results/GRCm39.primary_assembly.genome.fa.gz',
		#'results/gencode.vM33.primary_assembly.annotation.gtf',
		expand('results/{names}_flagstats.txt', names = NAMES)

# first need to download and unzip reference genome
#rule wget_m39:
	#output:
	#	'results/GRCm39.primary_assembly.genome.fa.gz'
	#params:
	#	ftp_path = 'https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M33/GRCm39.primary_assembly.genome.fa.gz'
	#shell:
	#	'''
	#	wget -p results/ {params.ftp_path}
	#	'''

#rule wget_m39_gtf:
#	output:
#		'results/gencode.vM33.primary_assembly.annotation.gtf.gz'
#	params:
#		ftp_path = 'https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M33/gencode.vM33.primary_assembly.annotation.gtf.gz'
#	shell:
#		'''
#		wget -p results/ {params.ftp_path}
#		'''	

#rule unzip:
#	input:
#		gz = 'results/gencode.vM33.primary_assembly.annotation.gtf.gz'
#	output:
#		gtf = 'results/gencode.vM33.primary_assembly.annotation.gtf'
#	shell:
#		'''
#		gunzip -c {input.gz} > {output.gtf}
#		'''

# rule to align each of samples against m39 reference genome using STAR
# make sure to read up on how STAR names it output files	
rule star:
	input:
		r1 = 'samples/full_files/{name}_R1.fastq.gz',
		r2 = 'samples/full_files/{name}_R2.fastq.gz',
		star_dir = 'samples/m39_star/'
	output:	
		bam = 'results/{name}.Aligned.out.bam'
	params:
		prefix = 'results/{name}.'
	threads: 8
	shell:
		'''
		STAR --runThreadN {threads} --genomeDir {input.star_dir} --readFilesIn {input.r1} {input.r2} --readFilesCommand zcat --outSAMtype BAM Unsorted --outFileNamePrefix {params.prefix}
		'''

# post-alignment quality control with samtools flagstat
rule samtools_flagstat:
	input:
		bam = 'results/{name}.Aligned.out.bam'
	output:
		flagstats = 'results/{name}_flagstats.txt'
	shell:
		'''
		samtools flagstats {input.bam} > {output.flagstats}
		'''